sl-comments  : # Comment
             : $ Comment
             : £ Comment
             : € Comment
             : ¥ Comment

Number       : INT|FLOAT

NoneType     : [Returned by function_std]

String       : (SINGLE-QUOTE OR DOUBLE-QUOTE) characters (SINGLE-QUOTE OR DOUBLE-QUOTE)

function_std : print LPAREN value RPAREN -> STDOUT
             : (CLEAR OR CLS) LPAREN RPAREN -> STDOUT
             : run LPAREN STRING: FILEPATH RPAREN -> STDOUT + MEMORY
             : exit LPAREN RPAREN -> MEMORY
             : append LPAREN LIST, value: item RPAREN -> LIST
             : pop LPAREN LIST, value: index RPAREN -> LIST
             : extend LPAREN LISTa, LISTb RPAREN -> LISTa

function-ret : print_ret LPAREN value RPAREN
             : input LPAREN RPAREN
             : input_int LPAREN RPAREN
             : input_char LPAREN RPAREN
             : int LPAREN value RPAREN
             : float LPAREN value RPAREN
             : str LPAREN value RPAREN
             : list LPAREN value RPAREN
             : is_num LPAREN value RPAREN
             : is_str LPAREN value RPAREN
             : is_list LPAREN value RPAREN
             : is_func LPAREN value RPAREN
             : len LPAREN STRING|LIST RPAREN

statements   : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement		 : KEYWORD:return expr?
						 : KEYWORD:continue
						 : KEYWORD:break
						 : expr

expr         : KEYWORD:var IDENTIFIER EQ expr
             : comp-expr ((KEYWORD:and|KEYWORD:or comp-expr))*

comp-expr    : not comp-expr
             : arith-expr ((EE|NE|LT|GT|LTE|GTE) arith-expr)*
             : string ((EE|NE)) string

arith-expr   : term ((PLUS|MINUS) term)*

term         : factor ((MUL|DIV) factor)*

factor       : (PLUS|MINUS) factor
             : power

power        : call (POW factor)*

call         : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom         : INT|FLOAT|STRING|LIST|IDENTIFIER
             : LPAREN expr RPAREN
             : list-expr
             : if-expr
             : for-expr
             : while-expr
             : func-def

list-expr    : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr      : KEYWORD:if expr KEYWORD:then
               (statement if-expr-b|if-expr-c?)
             | (NEWLINE statements KEYWORD:end|if-expr-b|if-expr-c)

if-expr-b    : KEYWORD:elif expr KEYWORD:then
               (statement if-expr-b|if-expr-c?)
             | (NEWLINE statements KEYWORD:end|if-expr-b|if-expr-c)

if-expr-c    : KEYWORD:else
               statement
             | (NEWLINE statements KEYWORD:end)

for-expr     : KEYWORD:for IDENTIFIER EQ expr KEYWORD:to expr (KEYWORD:step expr)? KEYWORD:then
               statement
             | (NEWLINE statements KEYWORD:end)

while-expr   : KEYWORD:while expr KEYWORD:then
               statement
             | (NEWLINE statements KEYWORD:end)

func-def     : KEYWORD:func IDENTIFIER?
               LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
               (ARROW expr)
             | (NEWLINE statements KEYWORD:end)
